% Integrating experimental data using Simpsonâ€™s 1/3 rule
% Checks if there are an odd number of intervals, if there are, the trapezoidal rule is used for the last interval

% Error check that the inputs are the same length.
% Error check that the x input is equally spaced.
% Warn the user if the trapezoidal rule has to be used on the last interval.

function [I] = Simpson(x, y)
% Numerical evaluation of integral by Simpson's 1/3 Rule
% Inputs
%   x = the vector of equally spaced independent variable
%   y = the vector of function values with respect to x
% Outputs:
%   I = the numerical integral calculated

% Ensure x and y are equal length
if length(x) ~= length(y)
    error ('Vectors x and y must be the same length')
end

% Ensure x values are equal spaced
u = diff(x)
if range(u) ~= 0
    error ('Please ensure x is equally spaced :]')
end

h = u(1)

n = length(x)-1
if mod (n,2) ~= 0
    warning ('Trapezodial rule has to be used for last interval sorry')
    I = (h/3) * (y(1) + 4*sum(y(2:2:end-1)) + 2*sum(y(3:2:end-2)) + y(end-1)) ...
    + (h/2)*(y(end-1) + y(end))
else
    I = (h/3) * (y(1) + 4*sum(y(2:2:end-1)) + 2*sum(y(3:2:end-2)) + y(end))
end


end

time = [140 141 142 143 144 145 146 147 148 149];
% Carbon Dioxide Evolution Rate (g/hour)
CO2evo = [15.72 15.53 15.19 16.56 16.21 17.39 17.36 17.42 17.60 17.75];
% Oxygen Uptake Rate (g/hour)
OxUp = [15.59 16.16 15.35 15.13 14.20 14.23 14.29 12.74 14.74 13.68];


% Using the matlab solution
total_CO2_trap = trapz(time, CO2evo)
total_Ox_trap = trapz(time, OxUp)

% Using the matlab solution
total_CO2_simp = Simpson(time, CO2evo)
total_Ox_simp = Simpson(time, OxUp)
